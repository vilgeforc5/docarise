// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CrawlJob {
  id        String      @id @default(cuid())
  url       String
  status    CrawlStatus @default(PENDING)
  error_msg String?     @map("errorMsg")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  CrawlPage CrawlPage[]
}

model CrawlPage {
  id          String      @id @default(cuid())
  url         String
  status      CrawlStatus @default(PENDING)
  error_msg   String?
  contentHash String? // hash of all chunks

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  PageChunk PageChunk[]

  crawlJobId String
  crawlJob   CrawlJob @relation(fields: [crawlJobId], references: [id])
}

model PageChunk {
  id      String @id @default(cuid())
  content String
  index   Int //chunk order withing CrawlPage

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  crawlPageId String
  page        CrawlPage @relation(fields: [crawlPageId], references: [id])
}

enum CrawlStatus {
  PENDING
  IN_PROGRESS
  FINISHED
  ERROR
}
